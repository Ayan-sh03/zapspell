// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package sqlc

import (
	"context"
	"database/sql"
)

const addAttempt = `-- name: AddAttempt :exec
INSERT INTO attempts(
    user_id,word_id,attempt_word,is_correct
)VALUES(
    $1,$2,$3,$4
)
`

type AddAttemptParams struct {
	UserID      int32
	WordID      int32
	AttemptWord string
	IsCorrect   bool
}

func (q *Queries) AddAttempt(ctx context.Context, arg AddAttemptParams) error {
	_, err := q.db.ExecContext(ctx, addAttempt,
		arg.UserID,
		arg.WordID,
		arg.AttemptWord,
		arg.IsCorrect,
	)
	return err
}

const addWord = `-- name: AddWord :one
INSERT INTO words(
    word
)VALUES(
    $1
)RETURNING id, word, created_at
`

func (q *Queries) AddWord(ctx context.Context, word string) (Word, error) {
	row := q.db.QueryRowContext(ctx, addWord, word)
	var i Word
	err := row.Scan(&i.ID, &i.Word, &i.CreatedAt)
	return i, err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users(
    username,email
)VALUES(
    $1,$2
)
`

type CreateUserParams struct {
	Username string
	Email    string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser, arg.Username, arg.Email)
	return err
}

const getAllWords = `-- name: GetAllWords :many
SELECT id, word, created_at
FROM words
`

func (q *Queries) GetAllWords(ctx context.Context) ([]Word, error) {
	rows, err := q.db.QueryContext(ctx, getAllWords)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Word
	for rows.Next() {
		var i Word
		if err := rows.Scan(&i.ID, &i.Word, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAttempPerWord = `-- name: GetAttempPerWord :one
SELECT attempt_word,is_correct
FROM attempts
WHERE user_id = $1 AND word_id= $2
`

type GetAttempPerWordParams struct {
	UserID int32
	WordID int32
}

type GetAttempPerWordRow struct {
	AttemptWord string
	IsCorrect   bool
}

func (q *Queries) GetAttempPerWord(ctx context.Context, arg GetAttempPerWordParams) (GetAttempPerWordRow, error) {
	row := q.db.QueryRowContext(ctx, getAttempPerWord, arg.UserID, arg.WordID)
	var i GetAttempPerWordRow
	err := row.Scan(&i.AttemptWord, &i.IsCorrect)
	return i, err
}

const getAttemptsByUserID = `-- name: GetAttemptsByUserID :many
SELECT id, user_id, word_id, attempt_word, is_correct, attempted_at
FROM attempts
WHERE user_id = $1
`

func (q *Queries) GetAttemptsByUserID(ctx context.Context, userID int32) ([]Attempt, error) {
	rows, err := q.db.QueryContext(ctx, getAttemptsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Attempt
	for rows.Next() {
		var i Attempt
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.WordID,
			&i.AttemptWord,
			&i.IsCorrect,
			&i.AttemptedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAttemptsForAllWordByUsesId = `-- name: GetAttemptsForAllWordByUsesId :many
SELECT 
    a.id AS attempt_id,
    w.id AS word_id,
    w.word,
    a.attempt_word,
    a.is_correct,
    a.attempted_at
FROM 
    attempts a
JOIN 
    words w ON a.word_id = w.id
WHERE 
    a.user_id = $1
ORDER BY 
    a.attempted_at DESC
`

type GetAttemptsForAllWordByUsesIdRow struct {
	AttemptID   int32
	WordID      int32
	Word        string
	AttemptWord string
	IsCorrect   bool
	AttemptedAt sql.NullTime
}

func (q *Queries) GetAttemptsForAllWordByUsesId(ctx context.Context, userID int32) ([]GetAttemptsForAllWordByUsesIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getAttemptsForAllWordByUsesId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAttemptsForAllWordByUsesIdRow
	for rows.Next() {
		var i GetAttemptsForAllWordByUsesIdRow
		if err := rows.Scan(
			&i.AttemptID,
			&i.WordID,
			&i.Word,
			&i.AttemptWord,
			&i.IsCorrect,
			&i.AttemptedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRandomWord = `-- name: GetRandomWord :one
SELECT word
FROM words
ORDER BY RANDOM()
LIMIT 1
`

func (q *Queries) GetRandomWord(ctx context.Context) (string, error) {
	row := q.db.QueryRowContext(ctx, getRandomWord)
	var word string
	err := row.Scan(&word)
	return word, err
}

const getResultByUserID = `-- name: GetResultByUserID :one
SELECT id, user_id, correct_spellings, total_attempts, success_percentage, updated_at
FROM results
WHERE user_id = $1
`

func (q *Queries) GetResultByUserID(ctx context.Context, userID sql.NullInt32) (Result, error) {
	row := q.db.QueryRowContext(ctx, getResultByUserID, userID)
	var i Result
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CorrectSpellings,
		&i.TotalAttempts,
		&i.SuccessPercentage,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, email, created_at
FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, email, created_at
FROM users
WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const getUserIDByEmail = `-- name: GetUserIDByEmail :one
SELECT id
FROM users
WHERE email = $1
`

func (q *Queries) GetUserIDByEmail(ctx context.Context, email string) (int32, error) {
	row := q.db.QueryRowContext(ctx, getUserIDByEmail, email)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getWordByID = `-- name: GetWordByID :one
SELECT id, word, created_at
FROM words
WHERE id = $1
`

func (q *Queries) GetWordByID(ctx context.Context, id int32) (Word, error) {
	row := q.db.QueryRowContext(ctx, getWordByID, id)
	var i Word
	err := row.Scan(&i.ID, &i.Word, &i.CreatedAt)
	return i, err
}

const updateUserResults = `-- name: UpdateUserResults :exec
UPDATE results
SET
    correct_spellings = correct_spellings + (CASE WHEN $1::boolean THEN 1 ELSE 0 END),
    total_attempts = total_attempts + 1,
    updated_at = CURRENT_TIMESTAMP
WHERE user_id = $2::int
`

type UpdateUserResultsParams struct {
	Iscorrect bool
	Userid    int32
}

func (q *Queries) UpdateUserResults(ctx context.Context, arg UpdateUserResultsParams) error {
	_, err := q.db.ExecContext(ctx, updateUserResults, arg.Iscorrect, arg.Userid)
	return err
}
